#- name: sample_book
#  hosts: root
#  remote_user: root
#  become: true
#  tasks:
#    - name: Run nexus container
#      command: docker start nexus
#      ignore_errors: yes
#    - name: Run SonarQube container
#      command: docker start sonarqueb
#      ignore_errors: yes
---
- name: Test Ansible connectivity
  hosts: localhost
  tasks:
    - name: Check connectivity
      command: echo "Ansible is working"
#    - name: Run Nexus container
#      command: docker start nexus
#      ignore_errors: yes
#    - name: Run SonarQube container
#      command: docker start sonarqueb
#      ignore_errors: yes
#    - name: Run MySQL container
#      command: docker start mysqldb
#      ignore_errors: yes
#    - name: Run cAdvisor container
#      command: docker start cadvisor
#      ignore_errors: yes
#    - name: Run Prometheus container
#      command: docker start prometheus
#      ignore_errors: yes
#    - name: Run Grafana container
#      command: docker start grafana
#      ignore_errors: yes
#
#    - name: maven Clean Notif-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml clean
#      ignore_errors: yes
#    - name: maven Clean Discovery-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/discovery-service/pom.xml clean
#      ignore_errors: yes
#    - name: maven Clean Gateway-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/gateway-service/pom.xml clean
#      ignore_errors: yes
#
#    - name: maven Compile Notif-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml compile
#      ignore_errors: yes
#    - name: maven Compile Discovery-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/discovery-service/pom.xml compile
#      ignore_errors: yes
#    - name: maven Compile Gateway-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/gateway-service/pom.xml compile
#      ignore_errors: yes
#
#
#    - name: Maven Test with JUnit / Mockito
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml test -DskipTests
#      ignore_errors: yes
#
#    - name: maven Package Notif-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml package
#      ignore_errors: yes
#
#    - name: maven Install Notif-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml install
#      ignore_errors: yes
#    - name: maven Install Discovery-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/discovery-service/pom.xml install
#      ignore_errors: yes
#    - name: maven Install Gateway-service with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/gateway-service/pom.xml install
#      ignore_errors: yes
#
#    - name: JaCoCo coverage report with Ansible
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml jacoco:report
#      ignore_errors: yes
#
#    - name: Publish JaCoCo coverage report
#      shell: |
#        cd /var/lib/jenkins/workspace/notif/user-service
#        jacoco-cli report --classfiles '**/classes' --sourcefiles '**/src' --execfiles '**/target/jacoco.exec' --html ./jacoco-report --excludes '**/*Test*,**/*_javassist/**'
#      ignore_errors: yes
#
#    - name: Maven Test with SonarQube
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml sonar:sonar -Dsonar.login=admin -Dsonar.password=sonar
#      ignore_errors: yes
#
#    - name: Maven deplay with Nexus
#      command: mvn -f /var/lib/jenkins/workspace/notif/user-service/pom.xml deploy
#      ignore_errors: yes
    - name: Check if JaCoCo CLI is installed
      stat:
        path: /opt/jacoco/jacococli.jar
      register: jacoco_installed

    - name: Download JaCoCo CLI
      get_url:
        url: https://repo1.maven.org/maven2/org/jacoco/org.jacoco.cli/0.8.8/org.jacoco.cli-0.8.8-nodeps.jar
        dest: /opt/jacoco/jacococli.jar
      when: not jacoco_installed.stat.exists

    - name: Ensure JaCoCo CLI is installed
      shell: |
        if ! [ -f /opt/jacoco/jacococli.jar ]; then
          echo "JaCoCo CLI not found!"
          exit 1
        fi

    - name: Run JaCoCo coverage report
      shell: |
        java -jar /opt/jacoco/jacococli.jar report target/jacoco.exec \
        --classfiles classes \
        --sourcefiles src \
        --html target/jacoco-report \
        --xml target/jacoco-report/jacoco.xml \
        --csv target/jacoco-report/jacoco.csv \
        --excludes **/target/**,**/*Test*,**/*_javassist/**
      args:
        chdir: /var/lib/jenkins/workspace/notif/user-service


    - name: Generate JaCoCo coverage report
      command: mvn jacoco:report
      args:
        chdir: /var/lib/jenkins/workspace/notif/user-service

    - name: Start HTTP server for JaCoCo report
      ansible.builtin.command: python -m http.server 8080
      args:
        chdir: /var/lib/jenkins/workspace/notif/user-service/target/site/jacoco/jacoco-resources/
      async: 60
      poll: 0

#    - name: Build Docker image for user-service
#      command: docker build -t user-service .
#      args:
#        chdir: /var/lib/jenkins/workspace/notif/user-service
#      ignore_errors: yes
#    - name: Docker login
#      docker_login:
#        username: khaterkhrouf
#        password: Ka22204202ter
#      register: login_output
#
#    - name: Tag Docker image for user-service
#      command: docker tag user-service khaterkhrouf/user-service:latest
#      args:
#        chdir: /var/lib/jenkins/workspace/notif/user-service
#
#    - name: Push Docker image for user-service
#      command: docker push khaterkhrouf/user-service:latest
#      args:
#        chdir: /var/lib/jenkins/workspace/notif/user-service
